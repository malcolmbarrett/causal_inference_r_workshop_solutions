---
title: "Bonus: Selection bias and correcting for loss to follow-up"
format: html
---

```{r}
#| label: setup
library(tidyverse)
library(broom)
library(propensity)
library(causaldata)
library(rsample)
```

In this example, we'll consider loss to follow-up in the NHEFS study. We'll use the binary exposure we used earlier in the workshop: does quitting smoking (`smk`) increase weight (`wt82_71`)? This time, however, we'll adjust for loss to followup (people who dropped out of the study between observation periods) using inverse probability of censoring weights.

# Your Turn 1

1. Take a look at how many participants were lost to follow up in `nhefs`, called `censored` in this data set. You don't need to change anything in this code.

```{r}
nhefs_censored <- nhefs |>
  drop_na(
    qsmk, sex, race, age, school, smokeintensity, smokeyrs, exercise,
    active, wt71
  )

nhefs_censored |>
  count(censored = as.factor(censored)) |>
  ggplot(aes(censored, n)) + 
  geom_col()
```

2. Create a logistic regression model that predicts whether or not someone is censored. 

```{r}
cens_model <- glm(
  censored ~ qsmk + sex + race + age + I(age^2) + education +
    smokeintensity + I(smokeintensity^2) +
    smokeyrs + I(smokeyrs^2) + exercise + active +
    wt71 + I(wt71^2),
  data = nhefs_censored, 
  family = binomial()
)

```

# Your Turn 2

1. Use the logistic model you just fit to create inverse probability of censoring weights
2. Calculate the weights using `.fitted`
3. Join `cens` to `nhefs_censored` so that you have the weights in your dataset
4. Fit a linear regression model of `wt82_71` weighted by `cens_wts`. We'll use this model as the basis for our G-computation

```{r}
cens <- cens_model |>
  augment(type.predict = "response", data = nhefs_censored) |>
  mutate(cens_wts = wt_ate(.fitted, censored)) |>
  select(id, cens_wts)

#  join all the weights data from above
nhefs_censored_wts <- nhefs_censored |>
  left_join(cens, by = "id")

cens_model <- lm(
  wt82_71 ~ qsmk + I(qsmk * smokeintensity) + smokeintensity +
    I(smokeintensity^2) + sex + race + age + I(age^2) + education + smokeyrs +
    I(smokeyrs^2) + exercise + active + wt71 + I(wt71^2),
  data = nhefs_censored_wts,
  weights = cens_wts
)
```

# Your Turn 3

1. Create the cloned data sets, called `kept_smoking` and `no`, where one dataset has `quit_smoking` set to 1 (quit smoking) and the other has it set to 0 (kept smoking).
2. Use the outcome model, `cens_model`, to make predictions for `kept_smoking` and `quit_smoking` 
3. Calculate the differences between the mean values of `kept_smoking` and `quit_smoking`

```{r}
predicted_kept_smoking <- cens_model |>
  augment(newdata = nhefs_censored |> mutate(qsmk = 0)) |>
  select(kept_smoking = .fitted)

predicted_quit_smoking <- cens_model |>
  augment(newdata = nhefs_censored |> mutate(qsmk = 1)) |>
  select(quit_smoking = .fitted)

#  summarize the mean difference
bind_cols(predicted_kept_smoking, predicted_quit_smoking) |>
  summarise(
    est = mean(quit_smoking - kept_smoking)
  )
```

## Stretch goal: Boostrapped intervals

Finish early? Try bootstrapping the G-computation model with censoring weights

Remember, you need to bootstrap the entire modeling process, including fitting both regression models, cloning the data sets, and calculating the effects.

```{r}
fit_gcomp_cens <- function(split, ...) { 
  .df <- analysis(split) 
  
  # fit the censoring model. remember to model using `.df` instead of `nhefs_censored`
  cens_model <- glm(
    censored ~ qsmk + sex + race + age + I(age^2) + education +
      smokeintensity + I(smokeintensity^2) +
      smokeyrs + I(smokeyrs^2) + exercise + active +
      wt71 + I(wt71^2),
    data = .df, 
    family = binomial()
  )
    # calculate the inverse probability of censoring weights. remember to predict `.df` instead of `nhefs_censored`
  cens <- cens_model |>
    augment(type.predict = "response", data = .df) |>
    mutate(cens_wts = 1 / ifelse(censored == 0, 1 - .fitted, 1)) |>
    select(id, cens_wts)
  
  #  join all the weights data from above to .df
  nhefs_censored_wts <- .df |>
    left_join(cens, by = "id")
  
  # fit outcome model. remember to model using `nhefs_censored_wts` instead of `nhefs_censored` or `.df`
  standardized_model <- lm(
    wt82_71 ~ qsmk + I(qsmk * smokeintensity) + smokeintensity +
      I(smokeintensity^2) + sex + race + age + I(age^2) + education + smokeyrs +
      I(smokeyrs^2) + exercise + active + wt71 + I(wt71^2),
    data = nhefs_censored_wts,
    weights = cens_wts
  )
  
  # clone datasets. remember to clone `.df` instead of `nhefs_censored`
  kept_smoking <- .df |> 
    mutate(qsmk = 0)
  
  quit_smoking <- .df |> 
    mutate(qsmk = 1)
  
  # predict change in weight for each cloned dataset
  predicted_kept_smoking <- standardized_model |> 
    augment(newdata = kept_smoking) |>
    select(kept_smoking = .fitted)
  
  predicted_quit_smoking <- standardized_model |> 
    augment(newdata = quit_smoking) |>
    select(quit_smoking = .fitted)
  
  # calculate ATE
  bind_cols(predicted_kept_smoking, predicted_quit_smoking) |> 
    summarize(
      mean_quit_smoking = mean(quit_smoking),
      mean_kept_smoking = mean(kept_smoking),
      difference = mean_quit_smoking - mean_kept_smoking
    ) |> 
    # rsample expects a `term` and `estimate` column
    pivot_longer(everything(), names_to = "term", values_to = "estimate")
}

gcomp_results <- bootstraps(nhefs_censored, 1000, apparent = TRUE) |> 
  mutate(results = map(splits, fit_gcomp_cens))

# using bias-corrected confidence intervals
boot_estimate <- int_bca(gcomp_results, results, .fn = fit_gcomp_cens)

boot_estimate
```

***

# Take aways

* If loss to follow-up is potentially related to your study question, inverse probability of censoring weights can help mitigate the bias.
* You can use them in many types of models. If you're also using propensity score weights, simply multiply the weights together, then include the result as the weights for your outcome model.
